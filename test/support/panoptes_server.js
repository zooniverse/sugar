// Generated by CoffeeScript 2.7.0
var PanoptesServer, nock;

nock = require('nock');

PanoptesServer = class PanoptesServer {
  static mock({persist} = {
      persist: false
    }) {
    PanoptesServer.mockInvalidAuth({persist});
    return PanoptesServer.mockValidAuth({persist});
  }

  
    // Panoptes.authenticator 1, 'invalid_auth'
  static mockInvalidAuth({persist} = {
      persist: false
    }) {
    var mocked;
    mocked = nock(process.env.PANOPTES_HOST, {
      reqheaders: {
        'Content-Type': 'application/json',
        'Accept': 'application/vnd.api+json; version=1',
        'Authorization': 'Bearer invalid_auth'
      }
    });
    if (persist) {
      mocked = mocked.persist();
    }
    return mocked.get('/api/me').reply(401, ' ', {
      'www-authenticate': 'Bearer realm="Panoptes", error="invalid_token", error_description="The access token is invalid"',
      'content-type': 'text/html'
    });
  }

  
    // Panoptes.authenticator 1, 'valid_auth'
  static mockValidAuth({persist} = {
      persist: false
    }) {
    var mocked;
    mocked = nock(process.env.PANOPTES_HOST, {
      reqheaders: {
        'Content-Type': 'application/json',
        'Accept': 'application/vnd.api+json; version=1',
        'Authorization': 'Bearer valid_auth'
      }
    });
    if (persist) {
      mocked = mocked.persist();
    }
    return mocked.get('/api/me').reply(200, '{"users":[{"id":1,"display_name":"user1"}]}', {
      'content-type': 'application/vnd.api+json; version=1; charset=utf-8'
    });
  }

};

module.exports = PanoptesServer;
